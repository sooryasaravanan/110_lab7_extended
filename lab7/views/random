const express = require('express');
const cookieParser = require('cookie-parser');
const hbs = require('express-handlebars');
const path = require('path');
const { body, validationResult } = require('express-validator');

const { homeHandler } = require('./controllers/home.js');
const { getRoom, createRoom, searchMessages, editMessage } = require('./controllers/room.js');
const { loginHandler, renderLoginPage, createProfileHandler, renderCreateProfilePage } = require('./controllers/login.js');
const { connectToDatabase } = require('./db.js'); // Import the function

const app = express();
const port = 8080;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.engine('hbs', hbs({ extname: 'hbs', defaultLayout: 'layout', layoutsDir: __dirname + '/views/layouts/' }));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'hbs');

// Redirect the root URL to the login page
app.get('/', (req, res) => res.redirect('/login'));

app.get('/login', renderLoginPage); // Add route to render login page
app.post('/login', loginHandler); // Add route to handle login

app.get('/create-profile', renderCreateProfilePage); // Add route to render create profile page
app.post('/create-profile', 
    // Validation and sanitization
    [
        body('displayName').trim().isLength({ min: 1 }).escape().withMessage('Display name is required.'),
        body('email').isEmail().normalizeEmail().withMessage('Email is not valid.')
    ], 
    async (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            // If there are validation errors, render the create-profile page with errors
            return res.status(400).render('create-profile', {
                title: 'Create Profile',
                errors: errors.array(),
                data: req.body
            });
        }

        const { displayName, email } = req.body;

        // Connect to the database and create the profile
        const db = await connectToDatabase('users');
        const userDoc = {
            displayName,
            email,
            createdAt: new Date()
        };

        await db.collection('users').insertOne(userDoc);

        // Redirect to admin if the user is the admin
        if (email === 'sooryasarva@gmail.com') {
            res.redirect('/admin');
        } else {
            res.redirect('/home');
        }
    }); // Add route to handle create profile

app.get('/home', homeHandler); // Route for home page after login
app.post('/logout', (req, res) => {
    res.clearCookie('uid');
    res.status(200).send('Logout successful');
});

// Route to handle search query
app.get('/:roomName/search', async (req, res) => {
    const { roomName } = req.params;
    const { query } = req.query;

    const db = await connectToDatabase(roomName);
    const searchResults = await db.collection('messages').find({ body: new RegExp(query, 'i') }).toArray();

    res.render('room', {
        title: roomName,
        roomName,
        messages: searchResults,
        user: req.user
    });
});

app.get('/:roomName', getRoom);
app.post('/create', createRoom);
app.post('/:roomName/messages', async (req, res) => {
    const { roomName } = req.params;
    const { nickname, message } = req.body;
    const datetime = new Date().toISOString();
    const db = await connectToDatabase(roomName);
    await db.collection('messages').insertOne({ nickname, body: message, datetime });
    res.redirect(`/${roomName}`);
});

// Add this route to handle editing messages
app.post('/:roomName/messages/:messageId/edit', editMessage);

// Admin route to view list of users
app.get('/admin', async (req, res) => {
    const db = await connectToDatabase('users');
    const users = await db.collection('users').find().toArray();
    res.render('admin', { title: 'Admin Page', users });
});

app.listen(port, () => console.log(`Server listening on http://localhost:${port}`));
